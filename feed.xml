<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://jecutter.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jecutter.github.io/" rel="alternate" type="text/html" /><updated>2020-03-31T21:14:06-07:00</updated><id>https://jecutter.github.io/feed.xml</id><title type="html">Jacob Cutter</title><subtitle></subtitle><author><name>Jacob Cutter</name></author><entry><title type="html">Comp The Player: Classifying NBA Players</title><link href="https://jecutter.github.io/blog/player-comp/" rel="alternate" type="text/html" title="Comp The Player: Classifying NBA Players" /><published>2020-03-30T00:00:00-07:00</published><updated>2020-03-30T00:00:00-07:00</updated><id>https://jecutter.github.io/blog/player_comp</id><content type="html" xml:base="https://jecutter.github.io/blog/player-comp/">&lt;p&gt;&lt;img src=&quot;/files/player_comp/imgonline-com-ua-twotoone-Xzq8ZtqJyh.jpg&quot; alt=&quot;Default image for player comparison project.
&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the expansion in popularity of NBA basketball over the years, an 
enormous amount of data is now being produced from game to game. This no longer
is limited to simple counting stats like points, rebounds, and assists – 
we can now ask questions like: “How many times did Klay Thompson dribble the ball
before shooting in the 3rd quarter? How many miles did he run on defense? 
How many times did he shoot from beyond 24 feet?”&lt;/p&gt;

&lt;p&gt;I recently spent some time scraping such advanced data from
the web in order to do some exploratory analysis on NBA basketball players
&lt;a href=&quot;https://github.com/jecutter/nba-data-models&quot;&gt;(see my Github for code)&lt;/a&gt;.
One of the simplest questions we can ask is: what defines a player? Not in terms of 
production or value, but &lt;em&gt;stylistically&lt;/em&gt;, how does a player play?&lt;/p&gt;

&lt;p&gt;In my explorations, I have found that it is difficult to use unsupervised methods 
such as &lt;em&gt;k&lt;/em&gt;-means clustering to define style of play, because the number of features 
and groups to use becomes highly arbitrary with &lt;em&gt;so many different ways to play&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I constructed a player classification model, with the target
labels being the veteran players themselves. Such a model allows us to find the best “comp”
for, say, rookie players who are frequently scouted by NBA front offices searching for 
cheap talent. With this motivation in mind, let’s see how such a model can be built.&lt;/p&gt;

&lt;h2 id=&quot;a-word-about-random-forest-classification&quot;&gt;A Word About Random Forest Classification&lt;/h2&gt;

&lt;p&gt;A common tool used for regression and classification is the
&lt;strong&gt;decision tree&lt;/strong&gt;, which essentially is an upside-down tree-like structure
beginning with a &lt;em&gt;root&lt;/em&gt;. From this starting node, which includes the entire sample,
the algorithm decides which of the input features/attributes provides the most 
information for differentiating the data samples (i.e. players). The
algorithm then splits the data on this feature.&lt;/p&gt;

&lt;p&gt;The formula for &lt;em&gt;information gain&lt;/em&gt; provided by a new feature is given by 
the difference between the entropy for the current node, &lt;script type=&quot;math/tex&quot;&gt;E(X)&lt;/script&gt;, and weighted
sum of the entropies of the nodes resulting from splitting the data on the new 
feature, &lt;script type=&quot;math/tex&quot;&gt;E(X | Y)&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;IG(X, Y) = E(X) - E(X | Y)&lt;/script&gt;

&lt;p&gt;The entropy of &lt;script type=&quot;math/tex&quot;&gt;E(X)&lt;/script&gt; is simply:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E(X) = - \sum_i p_i \log{p_i}&lt;/script&gt;

&lt;p&gt;The entropy &lt;script type=&quot;math/tex&quot;&gt;E(X | Y)&lt;/script&gt; is weighted by number of samples in each resultant node,
preventing an insignificant node from dominating the entropy.&lt;/p&gt;

&lt;p&gt;The algorithm repeats this process for each node, each time computing 
the information gain for the remaining input features. In this way,
a tree is “grown” in descending order of information gain. For a nice, detailed 
explanation broken down using examples, see 
&lt;a href=&quot;https://towardsdatascience.com/entropy-how-decision-trees-make-decisions-2946b9c18c8&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, if we can grow a tree, why not grow a forest? A &lt;strong&gt;random forest&lt;/strong&gt; is a collection
of many decision trees, which is highly advantageous for many problems.
Not only is each tree a random sub-sample of the input training data
(a sampling technique known as &lt;em&gt;bootstrapping&lt;/em&gt;), but each tree also uses
a subset of input features. A vote is tallied from each tree’s prediction in order to 
determine the overall prediction, essentially averaging over all estimators.&lt;/p&gt;

&lt;p&gt;Below is a cartoon from 
&lt;a href=&quot;https://towardsdatascience.com/from-a-single-decision-tree-to-a-random-forest-b9523be65147&quot;&gt;this article&lt;/a&gt; 
by Rosaria Silipo and Kathrin Melcher.&lt;/p&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/player_comp/random_forest_combined.jpg&quot;&gt;
    &lt;img src=&quot;/files/player_comp/random_forest_combined.jpg&quot; alt=&quot;Image of random decision tree forest.&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;A random forest of decision trees. At the bottom is a simple 
  example of data bootstrapping and random feature selection for various trees.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;The strengths of this algorithm are that it can handle missing values, it automatically 
accounts for relative feature importance, and it avoids overfitting by canceling out biases.&lt;/p&gt;

&lt;p&gt;As we will see, our model will consist of 181 output labels (or classes), which
is the number of veteran players who played for the last 4 complete NBA seasons
(2016-2019). Not only are there many labels, but there are also many input features
to differentiate style of play. What’s more, we only have 3 samples per label to work
with if we leave out one season as a test dataset.&lt;/p&gt;

&lt;p&gt;For all these reasons, the Random Forest model is the ideal candidate 
for performing player classification.&lt;/p&gt;

&lt;h2 id=&quot;feature-selection&quot;&gt;Feature Selection&lt;/h2&gt;

&lt;p&gt;Through some exploratory data analysis which I will not thoroughly detail here,
combined with some basketball logic and intuition, the input features below were selected
for the random forest classification (RFC).&lt;/p&gt;

&lt;p&gt;Shown is a Python snippet which displays the relevant features in a Pandas 
dataframe, which was the result of data scraping from a variety of NBA data sources.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Specify which dataframe columns to use as model features
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_05FT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_59FT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_1014FT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_1519FT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_2024FT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_GT24FT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FG_FREQ_CANDS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FTR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ASTR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'TOR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ORR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DRR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'BLK_PH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'STL_PH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DFGP_PG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Display the dataframe with selected features
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'display.max_columns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/player_comp/player_class_features_table.png&quot;&gt;
    &lt;img src=&quot;/files/player_comp/player_class_features_table.png&quot; alt=&quot;A Pandas dataframe showing the data used as classifier model input.&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;These stats can be summarized as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;‘height’ – player height in inches&lt;/li&gt;
  &lt;li&gt;‘weight’ – player weight in lbs&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_05FT’ – percentage of shots from 0-5 ft. from the basket&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_59FT’ – percentage of shots from 5-9 ft. from the basket&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_1014FT’ – percentage of shots from 10-14 ft. from the basket&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_1519FT’ – percentage of shots from 15-19 ft. from the basket&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_2024FT’ – percentage of shots from 20-24 ft. from the basket&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_GT24FT’ – percentage of shots from &amp;gt; 24 ft. from the basket&lt;/li&gt;
  &lt;li&gt;‘FG_FREQ_CANDS’ – percentage of shots that are catch-and-shoot (no dribbles)&lt;/li&gt;
  &lt;li&gt;‘FTR’ – free throw rate&lt;/li&gt;
  &lt;li&gt;‘ASTR’ – assist rate&lt;/li&gt;
  &lt;li&gt;‘TOR’ – turnover rate&lt;/li&gt;
  &lt;li&gt;‘ORR’ – offensive rebounding rate&lt;/li&gt;
  &lt;li&gt;‘DRR’ – defensive rebounding rate&lt;/li&gt;
  &lt;li&gt;‘BLK_PH’ – shot blocks (per 100 possessions)&lt;/li&gt;
  &lt;li&gt;‘STL_PH’ – steals (per 100 possessions)&lt;/li&gt;
  &lt;li&gt;‘DFGP_PG’ – defensive/opponent field goal percentage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;em&gt;height&lt;/em&gt; and &lt;em&gt;weight&lt;/em&gt; are hardly “play-style” attributes, but rather
physical attributes. This was deemed important since strict lines between player
positions, e.g. point guards, shooting guards, centers, etc., are becoming increasingly 
blurred in the modern NBA, but a player’s size still determines how a player is utilized.&lt;/p&gt;

&lt;p&gt;The offensive stats are relatively self-explanatory; we largely differentiate a player 
by where on the floor they take their shots, how often they draw fouls, and how often they
make plays or rebound the ball.&lt;/p&gt;

&lt;p&gt;A player’s defense is more difficult to quantify, however the opponent’s defensive field
goal percentage is included to account for man-on-man defense in addition to a player’s 
blocks and steals.&lt;/p&gt;

&lt;p&gt;It is worth noting that this list is neither exhaustive nor completely optimized.
These resulted in decent accuracy, however there are a variety of unused additional 
stats that would be interesting to leverage. For example, I have also scraped play-type 
stats: how often does a player score on pick-and-rolls? Put-backs? Isolation plays?
However, this would greatly increase the number of features and statistical interactions
have not been thoroughly studied.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-random-forest-model&quot;&gt;Creating a Random Forest Model&lt;/h2&gt;

&lt;p&gt;To create the RFC model, we first separate the input data into veterans and rookies.
Here, veterans are all players who played in &lt;em&gt;each&lt;/em&gt; season from 2016-2019,
while rookies only played in the 2019 season.&lt;/p&gt;

&lt;p&gt;I then divide the veteran dataset into a training set (3 seasons)
and a testing set (the 2019 season), as out-of-sample testing set will be used to 
calculate the unbiased accuracy of our model. I also separate the training 
and testing datasets into input features and output labels (the player names).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Create separate dataframes for established players and rookies
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_vets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_vets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_vets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_vets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_vets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df_rooks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_rooks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_rooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_rooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create input features and target labels (player names) for test data
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create matching training dataset using only veterans who are still in the NBA
# (and thus have available training data)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to properly fit our input training data, it is also a good idea
to scale the input features to unit variance and subtract their means.
This may be overkill, since decision trees already weigh features appropriately,
but it is a good habit for performing machine learning.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Scale features which will be used in model fitting
# (for both training and testing datasets)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardScaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scale_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardScaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A comprehensive grid search is performed on the various hyperparameters
of the RandomForestClassifier in scikit-learn, using the GridSearchCV 
&lt;em&gt;k&lt;/em&gt;-fold cross validation method.
This is actually quite time intensive, but worth it given the
large number of features and output labels.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Perform a comprehensive grid search to optimize parameters for Random Forest classification
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_estimators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_samples_split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_samples_leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;param_grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'n_estimators'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_estimators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'max_depth'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'min_samples_split'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_samples_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'min_samples_leaf'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_samples_leaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GridSearchCV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomForestClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Optimized hyperparameters:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rfc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomForestClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n_estimators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'n_estimators'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;max_depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'max_depth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_samples_split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'min_samples_split'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_samples_leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'min_samples_leaf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rfc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the hyperparameters are optimized, we fit the training data 
to create our RFC model.&lt;/p&gt;

&lt;p&gt;The model is then run on our test dataset (the 2019 dataset for each
veteran player). The accuracy here is then simply the fraction of 
veterans that were properly identified with themselves.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Run the classifier model on the test data
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rfc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Classified veteran players with an accuracy of&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Classified veteran players with an accuracy of 92.81767955801105 %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, we correctly predict that veteran players are themselves with
great accuracy, despite season-to-season variation. This is not far-fetched,
since we are providing the player’s physical attributes, however given 
fluctuations in the other stats this is still a solid result.&lt;/p&gt;

&lt;h2 id=&quot;results-for-rookies-in-the-2019-season&quot;&gt;Results for Rookies in the 2019 Season&lt;/h2&gt;

&lt;p&gt;Once we have a trained and tested model, we can ideally run the classifier
on any player not used in the training data to find their best player “comp”.&lt;/p&gt;

&lt;p&gt;It is worth noting: this is &lt;em&gt;not&lt;/em&gt; a comparison of production or value. 
All the features used in the model are &lt;em&gt;rate&lt;/em&gt; or &lt;em&gt;frequency&lt;/em&gt; stats, not
performance metrics (other than defensive FGP). This is simply a comparison
of play styles and overall similarity.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Format rookie dataset for input into the classifier and 
# attempt to classify rookies by their most similar veteran counterpart
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_rooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pred_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_rooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scale_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardScaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pred_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale_pred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rook_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rfc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rook_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Predicted that Rookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;is similar to Player:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Output:
Predicted that Rookie Aaron Holiday is similar to Player: Isaiah Canaan
Predicted that Rookie Alfonzo McKinnie is similar to Player: JaMychal Green
Predicted that Rookie Boban Marjanovic is similar to Player: Jusuf Nurkic
Predicted that Rookie Bonzie Colson is similar to Player: PJ Tucker
Predicted that Rookie Brandon Sampson is similar to Player: Jordan Clarkson
Predicted that Rookie Bruce Brown is similar to Player: Tyreke Evans
Predicted that Rookie Cameron Reynolds is similar to Player: Wesley Matthews
Predicted that Rookie Chandler Hutchison is similar to Player: Justise Winslow
Predicted that Rookie Cheick Diallo is similar to Player: Taj Gibson
Predicted that Rookie Christian Wood is similar to Player: Karl-Anthony Towns
Predicted that Rookie DJ Wilson is similar to Player: Markieff Morris
Predicted that Rookie Daniel Hamilton is similar to Player: D&lt;span class=&quot;s1&quot;&gt;'Angelo Russell
Predicted that Rookie Daryl Macon is similar to Player: Kemba Walker
Predicted that Rookie De'&lt;/span&gt;Aaron Fox is similar to Player: Jeff Teague
Predicted that Rookie De&lt;span class=&quot;s1&quot;&gt;'Anthony Melton is similar to Player: Tyus Jones
Predicted that Rookie Deandre Ayton is similar to Player: Alex Len
Predicted that Rookie Deng Adel is similar to Player: Klay Thompson
Predicted that Rookie Derrick White is similar to Player: Cory Joseph
Predicted that Rookie Devin Robinson is similar to Player: Giannis Antetokounmpo
Predicted that Rookie Deyonta Davis is similar to Player: Cody Zeller
Predicted that Rookie Donte DiVincenzo is similar to Player: Eric Gordon
Predicted that Rookie Duncan Robinson is similar to Player: Kyle Korver
Predicted that Rookie Dwayne Bacon is similar to Player: Tobias Harris
Predicted that Rookie Furkan Korkmaz is similar to Player: Terrence Ross
Predicted that Rookie Gary Clark is similar to Player: Kyle Korver
Predicted that Rookie Henry Ellenson is similar to Player: Frank Kaminsky
Predicted that Rookie Isaiah Briscoe is similar to Player: TJ McConnell
Predicted that Rookie Ivan Rabb is similar to Player: Taj Gibson
Predicted that Rookie Jake Layman is similar to Player: Aaron Gordon
Predicted that Rookie Jalen Brunson is similar to Player: Tyus Jones
Predicted that Rookie James Nunnally is similar to Player: Tony Snell
Predicted that Rookie Jaron Blossomgame is similar to Player: Tobias Harris
Predicted that Rookie Jaylen Adams is similar to Player: Tyus Jones
Predicted that Rookie Jemerrio Jones is similar to Player: Rajon Rondo
Predicted that Rookie Jevon Carter is similar to Player: Raymond Felton
Predicted that Rookie John Jenkins is similar to Player: JJ Redick
Predicted that Rookie Johnathan Williams is similar to Player: Kenneth Faried
Predicted that Rookie Jonah Bolden is similar to Player: Nikola Mirotic
Predicted that Rookie Josh Jackson is similar to Player: Andrew Wiggins
Predicted that Rookie Josh Okogie is similar to Player: Victor Oladipo
Predicted that Rookie Julian Washburn is similar to Player: Nicolas Batum
Predicted that Rookie Kadeem Allen is similar to Player: TJ McConnell
Predicted that Rookie Keita Bates-Diop is similar to Player: Jeff Green
Predicted that Rookie Kenrich Williams is similar to Player: Thabo Sefolosha
Predicted that Rookie Kevin Huerter is similar to Player: D'&lt;/span&gt;Angelo Russell
Predicted that Rookie Khem Birch is similar to Player: Kenneth Faried
Predicted that Rookie Landry Shamet is similar to Player: Marco Belinelli
Predicted that Rookie Luka Doncic is similar to Player: James Harden
Predicted that Rookie Malik Beasley is similar to Player: Courtney Lee
Predicted that Rookie Malik Monk is similar to Player: Langston Galloway
Predicted that Rookie Mikal Bridges is similar to Player: Thabo Sefolosha
Predicted that Rookie Miles Bridges is similar to Player: Justise Winslow
Predicted that Rookie Monte Morris is similar to Player: Dennis Schroder
Predicted that Rookie Moritz Wagner is similar to Player: Kelly Olynyk
Predicted that Rookie Rawle Alkins is similar to Player: JaMychal Green
Predicted that Rookie Ray Spalding is similar to Player: John Henson
Predicted that Rookie Rodions Kurucs is similar to Player: Maurice Harkless
Predicted that Rookie Ryan Broekhoff is similar to Player: Kyle Korver
Predicted that Rookie Semi Ojeleye is similar to Player: Stanley Johnson
Predicted that Rookie Shai Gilgeous-Alexander is similar to Player: Shaun Livingston
Predicted that Rookie Shake Milton is similar to Player: Josh Richardson
Predicted that Rookie Terrance Ferguson is similar to Player: Justin Holiday
Predicted that Rookie Theo Pinson is similar to Player: Vince Carter
Predicted that Rookie Thomas Bryant is similar to Player: DeMarcus Cousins
Predicted that Rookie Trae Young is similar to Player: Jeff Teague
Predicted that Rookie Tyler Dorsey is similar to Player: Zach LaVine
Predicted that Rookie Yuta Watanabe is similar to Player: Evan Turner
Predicted that Rookie Zach Collins is similar to Player: Karl-Anthony Towns
Predicted that Rookie Zhaire Smith is similar to Player: Damian Lillard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shown above are the predictions for each 2019 rookie. Just to get a sense
that these comparisons are sensible, let’s dive into an example.&lt;/p&gt;

&lt;h2 id=&quot;an-example-comparison&quot;&gt;An Example Comparison&lt;/h2&gt;

&lt;p&gt;Landry Shamet came into the league with low expectations, but was a pleasant
surprise and made an early impact as a shooter on the L.A. Clippers.&lt;/p&gt;

&lt;p&gt;Marco Belinelli is a veteran player known for his exceptional shooting skills
off the bench.&lt;/p&gt;

&lt;p&gt;Our classifier algorithm found them to have matching play styles. 
We can simply plot these players in a number of feature spaces and 
examine how similar they really are.&lt;/p&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/player_comp/shamet_belinelli_comp.png&quot;&gt;
    &lt;img src=&quot;/files/player_comp/shamet_belinelli_comp.png&quot; alt=&quot;Comparison plots for Landry Shamet and Marco Belinelli.&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;A comparison of Landry Shamet (black) and Marco Belinelli's seasons (red).&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;As we can see, they are indeed very similar in stature. They are both 
lanky shooting guards who not only like to shoot 3-pointers, but who
both shoot relatively deep 3-pointers. They are both limited play-makers
who get around half their shots off catch-and-shoot action (i.e. without
dribbling before the shot). An interesting point is that Belinelli 
tended to shoot more free throws over the last few years, which could 
merely indicate that he is older and more experienced with drawing fouls.&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-useful&quot;&gt;Why is this useful?&lt;/h2&gt;

&lt;p&gt;NBA team front offices and scouting teams spend an enormous amount of time
scouting and evaluating players. Scouts fly all over the world to watch players
live, they organize workouts to perform the “eye test”, and the media
often portrays a player in a light that effectively skews general perception.&lt;/p&gt;

&lt;p&gt;In short, biases are a part of the evaluation system. This algorithm is a method
for providing a direct comparison with veteran players who are successful enough
to have found a role in the league.&lt;/p&gt;

&lt;p&gt;Not only does this classification tool provide an unbiased label that may
not have been considered by glancing at a box score, it also allows front offices
to seek out cheap talent to fill a specific role. If a rebuilding team is looking
for a young backup shooting guard who plays tenacious defense, this algorithm
may indicate which players are closer to Jrue Holiday than James Harden.&lt;/p&gt;</content><author><name>Jacob Cutter</name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jecutter.github.io/files/player_comp/imgonline-com-ua-twotoone-Xzq8ZtqJyh.jpg" /><media:content medium="image" url="https://jecutter.github.io/files/player_comp/imgonline-com-ua-twotoone-Xzq8ZtqJyh.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An RAPM Model to Assess NBA Players</title><link href="https://jecutter.github.io/blog/rapm-model/" rel="alternate" type="text/html" title="An RAPM Model to Assess NBA Players" /><published>2020-03-28T00:00:00-07:00</published><updated>2020-03-28T00:00:00-07:00</updated><id>https://jecutter.github.io/blog/rapm_model</id><content type="html" xml:base="https://jecutter.github.io/blog/rapm-model/">&lt;p&gt;If you are like me, you watch NBA basketball games with a healthy mixture of 
enthusiasm for the game and skepticism of the media-driven narratives. In the last
several years, I noticed a wide variety of advanced stats being thrown around by fans
and media members alike, seemingly to justify their biased conclusions about players
with highly subjective analysis. What’s worse – these stats are frequently used
as definitive arguments for end-of-season awards, such as MVP.&lt;/p&gt;

&lt;p&gt;You hear things like:
“Player X is clearly superior to Player Y because he ranks higher in categories
A, B, and C.” 
Inevitably, you hear the response: “That may be true, but we all know stats A, B, and C
don’t necessarily translate to winning basketball!”&lt;/p&gt;

&lt;p&gt;It is interesting that even with such advanced stats, there is sometimes widespread
disagreement about a player’s impact or value. 
In my opinion, the crux of this problem is that there is minimal consideration of whether
a stat is built to be &lt;strong&gt;descriptive&lt;/strong&gt; or &lt;strong&gt;predictive&lt;/strong&gt;, and are too often
taken out of the applicable context, perhaps due to lack of transparency.&lt;/p&gt;

&lt;p&gt;Below, I will discuss my own attempt to “objectively” assess player impact by 
creating a RAPM model. However, some words are in order about the existing
landscape of advanced stats.&lt;/p&gt;

&lt;h2 id=&quot;player-impact-metrics&quot;&gt;Player Impact Metrics&lt;/h2&gt;

&lt;p&gt;Here are just some of the popular advanced player stats out there:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.basketball-reference.com/about/per.html&quot;&gt;Hollinger’s Player Efficiency Rating (PER)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.basketball-reference.com/about/ws.html&quot;&gt;Justin Kubatko’s Win Shares (WS)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plus-Minus/Adjusted Plus-Minus/RAPM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.basketball-reference.com/about/bpm2.html&quot;&gt;Daniel Myers’ Box Plus-Minus (BPM)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fansided.com/2016/09/08/player-tracking-plus-minus-2015-2016/&quot;&gt;Player Tracking Plus-Minus (PT-PM) by Andrew Johnson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.espn.com/nba/story/_/id/10740818/introducing-real-plus-minus&quot;&gt;ESPN’s Real Plus-Minus (RPM), by Jeremias Engelmann&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bball-index.com/player-impact-plus-minus/&quot;&gt;Player Impact Plus-Minus (PIPM) by Jacob Goldstein of BBall Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These stats were chosen to give a broad survey of existing methodologies. Follow the
links to get a more detailed description of each.&lt;/p&gt;

&lt;p&gt;Advanced stats can be roughly categorized as follows:
purely box-score based stats, Statistical Plus-Minus (SPM) models, and actual
Plus-Minus models (usually based on RAPM).&lt;/p&gt;

&lt;p&gt;PER and Win Shares belong to the first category. These all-in-one stats
use fixed formulae to give a measure of player production from simple box score counting stats 
(e.g. points, rebounds, assists, turnovers, steals, blocks, personal fouls).
The validity of these models lie in the theoretical motivation behind the formulae, 
which attempt to properly relate box score stats to points gained or lost.&lt;/p&gt;

&lt;p&gt;BPM and PT-PM are SPM models in the sense that they are also based on box score stats, 
however they are regressed against existing RAPM datasets to determine the coefficients which 
weight each feature (RAPM, a variant of plus-minus, will be discussed below). In other words, SPM
models are linear estimators of RAPM.&lt;/p&gt;

&lt;p&gt;It is easy to see why box-score based stats are considered limited; this can’t possibly 
encompass the entirety of a player’s impact! Is grabbing a defensive rebound over your teammate 
more valuable than setting a screen that opens up a shot for Stephen Curry? If a blocked shot
goes right back to the opposing team for a put-back, is that block more valuable than solid 
man-on-man defense?&lt;/p&gt;

&lt;p&gt;We would like to capture a player’s intangibles, or anything that is not shown
by the box score. Plus-Minus based stats may be used for this purpose, since they 
are based purely on overall team success when the player is on the floor. 
From standard Plus-Minus came Adjusted Plus-Minus and its successor RAPM, which is the basis 
for the other advanced stats above (RPM and PIPM). Let’s take a deeper look at what this means, 
and why this technique is so prominent in basketball analytics.&lt;/p&gt;

&lt;h2 id=&quot;what-is-regularized-adjusted-plus-minus&quot;&gt;What is Regularized Adjusted Plus-Minus?&lt;/h2&gt;

&lt;p&gt;The original &lt;strong&gt;Plus-Minus&lt;/strong&gt; stat is simply the point differential a team experiences when a player
is on the floor (i.e. points scored by the team minus points scored against the team).
However, it is well-established that this metric is deceptive, since a player surrounded
by highly skilled teammates will have an inflated Plus-Minus.&lt;/p&gt;

&lt;p&gt;To answer this, an &lt;strong&gt;Adjusted Plus-Minus (APM)&lt;/strong&gt; was created to account for these effects.
This essentially means creating a &lt;script type=&quot;math/tex&quot;&gt;n \times m&lt;/script&gt; matrix &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; of &lt;em&gt;n&lt;/em&gt; stints/possessions by &lt;em&gt;m&lt;/em&gt; 
players involved in all those possessions. We can assign entries to &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; if the player is on offense 
in the possession, &lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt; if on defense, and &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; if not on the floor. We can then formulate a matrix
equation to solve for the coefficients &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; that give the resulting point differentials &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Y = X \beta \\
X^T Y = X^T X \beta \\
\beta = (X^T X)^{-1} X^T Y&lt;/script&gt;

&lt;p&gt;We then approximate the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; coefficients by solving for the least-squares solution to 
the matrix equation. This yields &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; values which actually represent the player contribution, 
&lt;em&gt;removing the effect of teammates and opposing players&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;These coefficients are the player APM values. However, it was found that because of multicollinearity
between players, the results have enormous variance and essentially result in a meaningless 
stat. Luckily, there is a Bayesian filtering technique for dealing with this very issue: 
&lt;em&gt;ridge regression&lt;/em&gt;. This is a well-known method for penalizing outlier values back to the central value,
to reduce variance at the expense of bias.&lt;/p&gt;

&lt;p&gt;Ridge regression is performed by modifying the least squares formulation with a diagonal perturbation matrix &lt;script type=&quot;math/tex&quot;&gt;\lambda I&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\beta = (X^T Y + \lambda I)^{-1} X^T Y&lt;/script&gt;

&lt;p&gt;The &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; value is a model hyperparameter that must be tuned to stabilize the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;
coefficients, but without introducing an enormous bias. Note that in the limit that &lt;script type=&quot;math/tex&quot;&gt;\lambda \to 0&lt;/script&gt;, we 
recover least squares; in the limit &lt;script type=&quot;math/tex&quot;&gt;\lambda \to \infty&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; shrinks to &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;In this case, the resulting &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; coefficients are the RAPM values, or the &lt;strong&gt;Regularized Adjusted Plus-Minus&lt;/strong&gt;
for each player. To be clear, however, these values are no longer absolute &lt;em&gt;points added&lt;/em&gt;. This
regularization technique results in coefficients that are scaled by a factor dependent on &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;.
The RAPM values should therefore be taken as a relative stat, or a differential contribution.&lt;/p&gt;

&lt;p&gt;Circling back, how do our advanced stats incorporate RAPM? To be clear, SPM models like
BPM and PT-PM use RAPM &lt;em&gt;strictly as an input&lt;/em&gt; to find the model coefficients. 
RPM and PIPM, on the other hand, are essentially “enhanced” RAPM models which use
&lt;strong&gt;Bayesian priors&lt;/strong&gt; to constrain the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; coefficients based on a fit to &lt;em&gt;previous&lt;/em&gt;
RAPM datasets. As we will discuss, this puts a potentially biased emphasis on box score stats.&lt;/p&gt;

&lt;h2 id=&quot;harvesting-matchups-from-play-by-play-data&quot;&gt;Harvesting Matchups from Play-by-Play Data&lt;/h2&gt;

&lt;p&gt;In order to create my own RAPM model, I needed to construct a matrix &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; as explained above,
as well as the point differential resulting from each row (each &lt;em&gt;matchup stint&lt;/em&gt;).
I performed the following procedure:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scrape play-by-play data from all NBA games over a number of years&lt;/li&gt;
  &lt;li&gt;Parse the PBP data into &lt;em&gt;stints&lt;/em&gt;, or matchups between player lineups that may last 
a number of possessions&lt;/li&gt;
  &lt;li&gt;Calculate the point differential resulting from each stint, and from that
the &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; array (which is actually plus-minus per 100 possessions)&lt;/li&gt;
  &lt;li&gt;Create a matrix &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; stints (rows) and &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; NBA players (columns)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To scrape the data, I used a Selenium web driver in Python to parse
play-by-play data from &lt;a href=&quot;https://stats.nba.com/game/0021600001/playbyplay/&quot;&gt;NBA.com&lt;/a&gt;. 
These tables track the score and provide raw text data for analyzing the content of each
play. In addition, the starting lineup for each quarter was fetched separately, allowing 
for player rotations to be tracked throughout a game. This is crucial for monitoring which 
lineups are out on the floor at any time.&lt;/p&gt;

&lt;p&gt;Note that the full scraping and wrangling codes can be 
&lt;a href=&quot;https://github.com/jecutter/nba-data-models&quot;&gt;found at my Github&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/rapm_model/example_stint_table.png&quot;&gt;
    &lt;img src=&quot;/files/rapm_model/example_stint_table.png&quot; alt=&quot;A figure with a caption&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;An example table of lineup matchup stints as a Pandas dataframe. Note that
	the raw point differential, number of possessions for each stint, and plus-minus 
	per 100 possessions are shown.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Once we’ve isolated each matchup, we can parse the lineups into individual players
for the home and away teams. Since we are taking the results of a stint, rather than
single possessions, each team has been on both offense and defense. Therefore, we
give players a matrix entry of &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; (home team lineup), &lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt; (away team lineup), 
or &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; (not on the floor). We then take &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; to be the home team plus-minus per
100 possessions. This can be done with a Python function as shown below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateMatchupMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matchup_plus_minus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rapm_matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;player_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stint&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;On Stint &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;i...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;matchup_plus_minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ht_pm_ph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;f_ht_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_allp_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_htl_ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;player_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ht_lineup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rapm_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_allp_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f_vt_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_allp_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_vtl_ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;player_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vt_lineup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rapm_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_allp_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Finished!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rapm_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchup_plus_minus&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, we can build a ridge regression model to 
estimate the coefficients &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;developing-a-ridge-regression-model&quot;&gt;Developing a Ridge Regression Model&lt;/h2&gt;

&lt;p&gt;In order to optimize our ridge regression model, we will use the matchup matrix
&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and matchup point differential &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; as our training data and perform
&lt;em&gt;k&lt;/em&gt;-fold cross-validation to use the training data itself for validation.
This is important, since we have only 3 seasons of NBA data (2017-2019).&lt;/p&gt;

&lt;p&gt;In Python, we use the Ridge model from scikit-learn along with the GridSearchCV
method to perform cross-validation on a comprehensive set of &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; parameters
(Note: &lt;script type=&quot;math/tex&quot;&gt;\lambda \equiv \alpha&lt;/script&gt; in the Ridge model).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rapm_matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchup_plus_minus&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ridge_reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alphas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param_grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GridSearchCV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ridge_reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Optimized hyperparameters:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid_search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_params_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optimized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hyperparameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While &lt;em&gt;k&lt;/em&gt;-fold cross-validation is typically used to set &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;,
we can also make sense of our choice by plotting the calculated RAPM as a
function of &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;It is clear that the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; values for small &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; are highly unstable, as certain
players experience a lot of variance. We can see that for our optimized &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; parameter, 
the best- and worst-RAPM players are stable and begin to converge to the mean.&lt;/p&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/rapm_model/rapm_model_tuning.png&quot;&gt;
    &lt;img src=&quot;/files/rapm_model/rapm_model_tuning.png&quot; alt=&quot;Plot showing the tuning of the ridge regression lambda parameter.&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;A plot showing the regularization of player RAPM ratings as a function of lambda. On the right, we see the tightening of the correlation between RAPM and raw player +/- as lambda is increased.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;With these justifications in mind, we can select our hyperparameter with some
degree of confidence. However, it is important to point out that our typical notion
of unbiased, out-of-sample model testing is compromised here; player performance varies from 
season to season, and this model is meant to produce a &lt;em&gt;descriptive&lt;/em&gt; stat over seasons rather
than a &lt;em&gt;predictive&lt;/em&gt; one. But more on that later.&lt;/p&gt;

&lt;h2 id=&quot;evaluating-player-rapm-ratings&quot;&gt;Evaluating Player RAPM Ratings&lt;/h2&gt;

&lt;p&gt;Let’s take a look at how various players fare in RAPM.&lt;/p&gt;

&lt;p&gt;Along with play-by-play data, individual stats were scraped for NBA players, including
net rating, BPM, and RPM (again, see my &lt;a href=&quot;https://github.com/jecutter/nba-data-models&quot;&gt;Github&lt;/a&gt;). 
Note that &lt;em&gt;net rating&lt;/em&gt; is actually just the player’s raw plus-minus per 100 possessions, 
which doesn’t take into account the caliber of a player’s supporting cast. 
Below, we see the top 10 and bottom 10 players in RAPM, along with these other metrics.&lt;/p&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/rapm_model/ordered_players_rapm.png&quot;&gt;
    &lt;img src=&quot;/files/rapm_model/ordered_players_rapm.png&quot; alt=&quot;A figure with a caption&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Note: only players averaging &lt;script type=&quot;math/tex&quot;&gt;&gt; 20&lt;/script&gt; minutes per game are shown.&lt;/p&gt;

&lt;p&gt;It is clear that some players with great RAPM also have a high net rating, but this
is not always the case. While there is overall correlation, we have to account for the
fact that strengths/deficiencies are sometimes masked by context.&lt;/p&gt;

&lt;p&gt;Overall, the results are sensible. Stephen Curry has league-leading RAPM
over the last 3 years, which is largely considered to be the era of “small ball” and 3-point
shooting that he ushered in. It is interesting that the top 5 players are &lt;em&gt;all&lt;/em&gt; guards – 
smaller players, 3 of whom are considered excellent 2-way players and all of whom can 
shoot 3-pointers and make plays for others. Notice also that some players, especially Damian Lillard 
and Jrue Holiday, are highly underrated by ESPN’s RPM.&lt;/p&gt;

&lt;p&gt;On the other hand, the players with the worst RAPM 
tend to be either aging, inexperienced, or considered lazy on at least one end of the floor. 
For instance, Trae Young is a rookie considered to be one of the worst defenders in the league.&lt;/p&gt;

&lt;h2 id=&quot;comparing-with-other-advanced-stats&quot;&gt;Comparing with Other Advanced Stats&lt;/h2&gt;

&lt;p&gt;To understand what we’ve calculated better, and how it relates to existing metrics, 
we can examine correlations with a variety of box score and advanced stats.&lt;/p&gt;

&lt;p&gt;A useful tool for doing this is to make a Pearson correlation heatmap. This allows
us to examine relationships between a large number of features and potentially informs
us on what dependencies to examine further.&lt;/p&gt;

&lt;figure&gt;
  
  &lt;a href=&quot;/files/rapm_model/pearson_correlation_rapm.png&quot;&gt;
    &lt;img src=&quot;/files/rapm_model/pearson_correlation_rapm.png&quot; alt=&quot;Plot showing Pearson correlation of RAPM with other advanced stats.&quot; /&gt;
  &lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Shown in the matrix above are correlations between various player statistics averaged over
the 2017-2019 seasons, including the previously discussed PER, BPM, RPM, and RAPM.
The other abbreviated stats are: true shooting %, field goal attempts per 100 poss., 
free throw rate, opponent field goal %, assist-to-turnover ratio, rebound rate, blocks
per 100 poss., and steals per 100 poss.&lt;/p&gt;

&lt;p&gt;We can summarize some interesting points from this table:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PER has a much higher correlation with player usage and shot attempts than the other 
advanced stats (presumably, it rewards players who simply attempt to carry 
the offensive load)&lt;/li&gt;
  &lt;li&gt;PER, BPM, and RPM all have a slight correlation with player height, while
RAPM is completely uncorrelated with height&lt;/li&gt;
  &lt;li&gt;Similarly, PER, BPM, and RPM give much more weight to rebounds and blocks
than RAPM (interestingly, this is not as true for steals)&lt;/li&gt;
  &lt;li&gt;RAPM is the most correlated with opponent field goal %, which
serves as a proxy for man-on-man defense that is hard to quantify&lt;/li&gt;
  &lt;li&gt;True shooting % appears to be less correlated with RAPM than the other stats,
however this is also true for the free throw rate (note that free
throws factor in to true shooting)&lt;/li&gt;
  &lt;li&gt;PER and RPM are much more correlated with BPM than RAPM.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking all these observations together, it is reasonable to hypothesize that
1) other advanced stats appear to favor big men, including stats that are typical
for big men (e.g. rebounds and blocks), and 2) ESPN’s RPM, one of the most popular and 
quoted advanced stats, appears to be highly dependent on box score stats. Why is this?&lt;/p&gt;

&lt;p&gt;The explanation for this is that the RPM methodology uses box-score priors 
calculated from a historical RAPM dataset (which I have been unable to find).
These &lt;strong&gt;Bayesian priors&lt;/strong&gt; are then used in the current ridge regression to 
constrain the range of &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; for various players, whose value is essentially 
pre-estimated using their box score stats. While these priors are proprietary and not 
publicly available, it appears that the box-score component is significant.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;This exercise to create a minimally-biased player ranking is informative when comparing
to the publicly available advanced stats, because it shows just how subjective these 
models are.&lt;/p&gt;

&lt;p&gt;By subjective, I am &lt;em&gt;not&lt;/em&gt; saying that the box-score based models are never useful. 
In Bayesian statistics, it is common to employ Bayesian priors to constrain results.
However, the choice of these priors and the importance of each feature is inherently subjective,
and somewhat defeats the original purpose of the RAPM method: to measure a player’s overall impact 
and intangibles. If man-on-man defense is considered less valuable than a block, if a rebound 
is given more weight than a well-executed pass, and a taller player is given the edge over a 
shorter one, then our model loses its context-independence.&lt;/p&gt;

&lt;p&gt;The true power of metrics like ESPN’s RPM is its &lt;em&gt;predictive&lt;/em&gt; power. By regressing
against a very large RAPM dataset to calculate priors, it can then predict a player’s
future RAPM with better accuracy. However, RPM is often used as a &lt;em&gt;descriptive&lt;/em&gt; stat
to explain why a particular season’s box score stats, on which the model itself 
is tuned, give a particular player an edge. This may be circular, flawed logic, as it
inevitably leads to underestimating over-achievers and vice versa.&lt;/p&gt;

&lt;p&gt;As a descriptive stat, pure RAPM models may still be the most objective.
It may not accurately tell us what impact a player will have next season, but yet 
again, can any stat do that reliably given unavoidable year-to-year variations? 
No all-in-one stat gives a perfect player assessment, and every stat must be used in context.&lt;/p&gt;</content><author><name>Jacob Cutter</name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jecutter.github.io/files/rapm_model/steph_mccaw.jpg" /><media:content medium="image" url="https://jecutter.github.io/files/rapm_model/steph_mccaw.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>